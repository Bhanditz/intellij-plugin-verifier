buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
  }
}

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version = '1.5'
if (project.hasProperty("myVersion")) {
  version = project.myVersion;
}



allprojects {
  apply plugin: 'java'

  group = 'org.jetbrains.intellij.plugins'

  sourceCompatibility = 1.6
  targetCompatibility = 1.6
}

//build .jar with sources
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

//build .jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

repositories {
  maven { url "http://repo.maven.apache.org/maven2" }
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId project.name
      version project.version
    }
  }
}

def separator = File.separator
def mocksPath = "$buildDir" + separator + "mocks"

task prepareMock1(type: Copy) {
  doFirst { println("Copying mock plugin 1 .jar to the ${mocksPath}") }
  into mocksPath
  project(":mock-plugin1") {
    from tasks.withType(Jar)
  }
}

task prepareMock2(type: Copy) {
  doFirst { println("Creating structure for mock-plugin2 in ${mocksPath}") }
  into mocksPath + separator + "mock-plugin2" + separator + "lib"
  project(":mock-plugin2") {
    from tasks.withType(Jar)
  }
}

//doFirst { println("Creating structure for mock-plugin3 in ${mocksPath}")}
/*
task prepareMock3(type: Copy) {
  project(":mock-plugin3") {
    from tasks.withType(Jar)
  }
  into mocksPath + separator + "mock-plugin3" + separator + "classes"
}
*/

test.dependsOn prepareMock1, prepareMock2
publishToMavenLocal.dependsOn test


dependencies {
  //mock plugins are used in tests
  testRuntime project("mock-plugin1")

  compile group: 'org.jdom', name: 'jdom', version: '1.1.3'
  compile group: 'com.google.guava', name: 'guava', version: '18.0'
  compile group: 'commons-io', name: 'commons-io', version: '2.3'
  compile group: 'com.intellij', name: 'annotations', version: '12.0'
  compile group: 'org.ow2.asm', name: 'asm-all', version: '5.0.4'
  compile group: 'org.jsoup', name: 'jsoup', version: '1.8.3'
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.codehaus.plexus', name: 'plexus-archiver', version: '2.3'
}

bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')


  publish = true
  publications = ['MyPublication']

  pkg {
    repo = 'intellij-plugin-service'
    name = 'intellij-plugin-structure'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/JetBrains/intellij-plugin-verifier'
    userOrg = 'jetbrains'

    version {
      name = project.version
    }
  }
}

bintrayUpload.doFirst {

  if (!bintray.user || !bintray.key) {
    throw new StopExecutionException("You must specify (bintrayUser, bintrayApiKey) or (BINTRAY_USER, BINTRAY_API_KEY) properties")
  }

  println('Uploading IntelliJ structure ' + project.version + ' to bintray')
}

//run tests before deploying
bintrayUpload.dependsOn test