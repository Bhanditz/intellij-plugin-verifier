buildscript {
  ext {
    grailsVersion = project.grailsVersion
    kotlin_version = '1.0.5'
  }
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    classpath "org.springframework:springloaded:1.2.6.RELEASE"
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.5.0"
    classpath "org.grails.plugins:hibernate4:5.0.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def serviceVersion = project.hasProperty('myVersion') ? project.myVersion : '1.0'

project.ext.verifierVersion = '1.68'

configure(allprojects) {
  version = serviceVersion
  group "org.jetbrains.intellij.plugins.verifier"

  apply plugin: 'kotlin'
  apply plugin: 'idea'
  apply plugin: 'java'

  idea {
    module {
      inheritOutputDirs = false
      outputDir = file("$buildDir/classes/main")
    }
  }


  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/intellij-plugin-service" }
  }

  dependencies {
    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile 'com.github.salomonbrys.kotson:kotson:2.4.0'
    compile 'com.google.code.gson:gson:2.7'

    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.3.1'
  }

}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'


publishing {
  publications {

    def configurePublication = { MavenPublication pub, String projectName, boolean appendFatJar ->

      def proj = project(projectName)
      pub.groupId proj.group
      pub.artifactId proj.name
      pub.version proj.version

      pub.from proj.components.java
      pub.artifact proj.sourcesJar

      if (appendFatJar) {
        pub.artifact proj.shadowJar
      }

    }

    ClientPublication(MavenPublication) { configurePublication(it, ':cli', true) }
    RestPublication(MavenPublication) { configurePublication(it, ':rest', false) }
    ApiPublication(MavenPublication) { configurePublication(it, ':protocol', false) }

  }
}

publishToMavenLocal.dependsOn test

bintray {
  user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')


  publish = true
  publications = ['ClientPublication', 'ApiPublication', 'RestPublication']

  pkg {
    repo = 'intellij-plugin-service'
    name = 'intellij-plugin-verifier-service'
    licenses = ['Apache-2.0']
    vcsUrl = 'https://github.com/JetBrains/intellij-plugin-verifier'
//    userOrg = 'jetbrains'

    version {
      name = project.version
    }
  }
}

bintrayUpload.doFirst {

  if (!bintray.user || !bintray.key) {
    throw new StopExecutionException("You must specify (bintrayUser, bintrayApiKey) or (BINTRAY_USER, BINTRAY_API_KEY) properties")
  }

  println("Uploading Plugin Verifier Service module ${project.name}:${project.version}" + ' to bintray')
}

//run tests before deploying
bintrayUpload.dependsOn test

